{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","commentFetch2","theurl","console","log","commentFetch","url","push","links","react_default","a","createElement","state","redditData","defaultQuery","text","loading","_this2","fetch","then","response","json","data","setState","children","content","reg","threads","filter","soccer","test","title","d","Date","className","onClick","window","open","getDay","getMonth","getDate","map","hit","key","created_utc","href","target","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAoHeA,qBA3Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAkBRQ,cAAgB,SAAAC,GACdC,QAAQC,IAAIF,GAGZ,MAFW,oBArBMR,EA0BnBW,aAAe,SAAAC,GAEA,GACNC,KAAKD,GAEZ,IAAIE,EAAQd,EAAKO,cAAcK,GAE/B,OADAH,QAAQC,IAAII,GACLC,EAAAC,EAAAC,cAAA,+CA9BPjB,EAAKkB,MAAQ,CACXC,WAAY,GACZC,aAAc,QACdC,KAAM,GACNC,SAAS,GAPMtB,mFAWC,IAAAuB,EAAApB,KAClBqB,MAhBQ,4CAiBLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OACRL,EAAKM,SAAS,CAAEV,WAAYS,EAAKA,KAAKE,SAAUR,SAAS,uCA0B7D,IA4BIS,EA5BAC,EAAM,QACJC,EAAU9B,KAAKe,MAAMC,WAAWe,OAAO,SAAAC,GAAM,OACjDH,EAAII,KAAKD,EAAOP,KAAKS,SAEnBC,EAAI,IAAIC,KA0DZ,OAhCER,EADE5B,KAAKe,MAAMI,QAEXP,EAAAC,EAAAC,cAAA,MAAIuB,UAAU,WACX,IADH,8CAE8C,KAK9CzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MACEwB,QAAS,kBAAMC,OAAOC,KAAK,6BAC3BH,UAAU,WAET,IAJH,iBArBK,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAmB0BF,EAAEM,UALxB,KAnCO,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YA4BgDN,EAAEO,YAAa,IACxDP,EAAEQ,WAEL/B,EAAAC,EAAAC,cAAA,MAAIuB,UAAU,UACXP,EAAQc,IAAI,SAAAC,GAAG,OACdjC,EAAAC,EAAAC,cAAA,MAAIgC,IAAKD,EAAIpB,KAAKsB,aAChBnC,EAAAC,EAAAC,cAAA,KAAGkC,KAAMH,EAAIpB,KAAKhB,IAAKwC,OAAO,UAC3BJ,EAAIpB,KAAKS,OAGZtB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,aAAf,sCAOLzB,EAAAC,EAAAC,cAAA,eAAOc,EAAP,YAxGOsB,cCIEC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.47a253ec.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport { Component } from \"react\";\n\nconst API = \"https://www.reddit.com/r/nbastreams.json\";\nconst topStream = \"\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redditData: [],\n      defaultQuery: \"redux\",\n      text: \"\",\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(data =>\n        this.setState({ redditData: data.data.children, loading: false })\n      );\n  }\n\n  commentFetch2 = theurl => {\n    console.log(theurl);\n    let test = \"some random code\";\n\n    return test;\n  };\n\n  commentFetch = url => {\n    //hey\n    let urlArr = [];\n    urlArr.push(url);\n\n    let links = this.commentFetch2(url);\n    console.log(links);\n    return <div> stream links will appear here </div>;\n  };\n\n  render() {\n    /*const threads = this.state.redditData.filter(\n      game => game.data.link_flair_css_class === \"gamethread\"\n    );\n    */\n    let reg = /^Game/;\n    const threads = this.state.redditData.filter(soccer =>\n      reg.test(soccer.data.title)\n    );\n    let d = new Date();\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    let content;\n    if (this.state.loading) {\n      content = (\n        <h2 className=\"loading\">\n          {\" \"}\n          grabbing all the latest nba games, hold up!{\" \"}\n        </h2>\n      );\n    } else {\n      content = (\n        <div>\n          <br />\n          <h2\n            onClick={() => window.open(\"https://campusstreams.ga\")}\n            className=\"weather\"\n          >\n            {\" \"}\n            NBA Games for {days[d.getDay()]}, {months[d.getMonth()]}{\" \"}\n            {d.getDate()}\n          </h2>\n          <ol className=\"center\">\n            {threads.map(hit => (\n              <li key={hit.data.created_utc}>\n                <a href={hit.data.url} target=\"_blank\">\n                  {hit.data.title}\n                </a>\n\n                <div className=\"italicize\">stream links will appear here</div>\n              </li>\n            ))}\n          </ol>\n        </div>\n      );\n    }\n    return <div> {content} </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}